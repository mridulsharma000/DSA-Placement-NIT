// C++ program to illustrate macros
#include <iostream>
using namespace std;

// Macro definition
#define LIMIT 5   //LIMIT ne koi extra space nahi li

// Driver Code
int main()
{
	// Print the value of macro defined
	cout << "The value of LIMIT"
		<< " is " << LIMIT;

	return 0;
}


Types:

1. Object-like Macros: 
An object-like macro is a simple identifier that will be replaced by a code fragment. 
It is called object-like because it looks like an object in code that uses it. It is popularly used to replace a symbolic name with numerical/variable 
represented as constant.

eg. // C++ program to illustrate macros
#include <iostream>
using namespace std;

// Macro definition
#define DATE 31

// Driver Code
int main()
{
	// Print the message
	cout << "Lockdown will be extended"
		<< " upto " << DATE
		<< "-MAY-2020";

	return 0;
}

2. Chain Macros: 
Macros inside macros are termed as chain macros. In chain macros first of all parent macro is expanded then the child macro is expanded.

eg. // C++ program to illustrate macros
#include <iostream>
using namespace std;

// Macro definition
#define INSTAGRAM FOLLOWERS
#define FOLLOWERS 138

// Driver Code
int main()
{
	// Print the message
	cout << "Geeks for Geeks have "
		<< INSTAGRAM << "K followers on Instagram!";

	return 0;
}

OP: Geeks for Geeks have 138K followers on Instagram

3. Multi-line Macros: An object-like macro could have a multi-line. So to create a multi-line macro you have to use backslash-newline. 

eg. // C++ program to illustrate macros
#include <iostream>
using namespace std;

// Multi-line Macro definition
#define ELE 1, \
			2, \
			3

// Driver Code
int main()
{
	// Array arr[] with elements
	// defined in macros
	int arr[] = { ELE };

	// Print elements
	printf("Elements of Array are:\n");

	for (int i = 0; i < 3; i++) {
		cout << arr[i] << ' ';
	}

	return 0;
}

OP: Elements of Array are:
1  2  3  

4. Function-like Macro: These macros are the same as a function call. It replaces the entire code instead of a function name. 
Pair of parentheses immediately after the macro name is necessary. If we put a space between the macro name and the parentheses in the macro 
definition then the macro will not work. 
A function-like macro is only lengthened if an only if its name appears with a pair of parentheses after it. 
If we donâ€™t do this, the function pointer will get the address of the real function and lead to a syntax error.


eg. // C++ program to illustrate macros
#include <iostream>
using namespace std;

// Function-like Macro definition
#define min//yaha agar space dega toh error//(a, b) (((a) < (b)) ? (a) : (b))

// Driver Code
int main()
{

	// Given two number a and b
	int a = 18;
	int b = 76;

	cout << "Minimum value between"
		<< a << " and " << b
		<< " is: " << min(a, b);

	return 0;
}

OP: Minimum value between 18 and 76 is 18




